<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Grid with Color Picker</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            display: flex;
            flex-direction: column;
        }
        #formContainer {
            padding: 10px;
            background-color: #f0f0f0;
            width: 100%;
            box-sizing: border-box;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #gridContainer {
            display: grid;
            gap: 0;
            flex-grow: 1;
            width: 100%;
            height: calc(100vh - 50px); /* Adjust according to form height */
            box-sizing: border-box;
        }
        .grid-item {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgb(48, 104, 16);
            border: 1px solid #000; /* Thin border for visibility */
            box-sizing: border-box; /* Ensure border is included in size */
            cursor: pointer; /* Change cursor to pointer */
        }
        #colorInfo {
            display: none;
            margin-left: 10px;
        }
        option {
            color: #fff;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div id="formContainer">
        <form id="gridForm">
            <label for="xAxis">Number of boxes on x-axis:</label>
            <input type="number" id="xAxis" name="xAxis" min="1" required>
            <label for="yAxis">Number of boxes on y-axis:</label>
            <input type="number" id="yAxis" name="yAxis" min="1" required>
            <button type="submit">Generate Grid</button>
        </form>
        <button id="makeBoxesButton">Make boxes</button>
        <input type="color" id="colorPicker" style="display:none;">
        <select id="colorInfo" style="display:none;" onchange="selectSavedColor(this)"></select>
        <button id="submitBoxesButton">Submit boxes</button>
    </div>
    <div id="gridContainer"></div>

    <script>
        let makeBoxesMode = false;
        let selectedColor = "#000000";
        const clickedBoxes = {};

        document.getElementById('gridForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const xAxis = parseInt(document.getElementById('xAxis').value);
            const yAxis = parseInt(document.getElementById('yAxis').value);
            generateGrid(xAxis, yAxis);
        });

        document.getElementById('makeBoxesButton').addEventListener('click', function() {
            makeBoxesMode = !makeBoxesMode;
            document.getElementById('colorPicker').style.display = makeBoxesMode ? 'inline' : 'none';
            document.getElementById('colorInfo').style.display = makeBoxesMode ? 'inline' : 'none';
            if (makeBoxesMode) {
                selectedColor = document.getElementById('colorPicker').value;
                updateColorInfo();
            }
        });

        document.getElementById('colorPicker').addEventListener('input', function(event) {
            selectedColor = event.target.value;
        });

        document.getElementById('submitBoxesButton').addEventListener('click', function() {
            console.log(clickedBoxes);
        });

        function generateGrid(x, y) {
            const gridContainer = document.getElementById('gridContainer');
            gridContainer.innerHTML = '';
            gridContainer.style.gridTemplateColumns = `repeat(${x}, 1fr)`;
            gridContainer.style.gridTemplateRows = `repeat(${y}, 1fr)`;
            for (let i = 0; i < x * y; i++) {
                const gridItem = document.createElement('div');
                gridItem.className = 'grid-item';
                const xCoordinate = i % x;
                const yCoordinate = Math.floor(i / x);
                gridItem.dataset.coordinates = `${xCoordinate},${yCoordinate}`;
                gridItem.addEventListener('click', function() {
                    if (makeBoxesMode) {
                        const coords = gridItem.dataset.coordinates;
                        if (gridItem.style.backgroundColor === selectedColor || rgbToHex(gridItem.style.backgroundColor) === selectedColor) {
                            gridItem.style.backgroundColor = 'rgb(48, 104, 16)'; // Reset to original color
                            if (clickedBoxes[selectedColor]) {
                                clickedBoxes[selectedColor] = clickedBoxes[selectedColor].filter(c => c !== coords);
                                if (clickedBoxes[selectedColor].length === 0) {
                                    delete clickedBoxes[selectedColor];
                                }
                            }
                        } else {
                            gridItem.style.backgroundColor = selectedColor;
                            if (!clickedBoxes[selectedColor]) {
                                clickedBoxes[selectedColor] = [];
                            }
                            if (!clickedBoxes[selectedColor].includes(coords)) {
                                clickedBoxes[selectedColor].push(coords);
                            }
                        }
                        updateColorInfo();
                    }
                });
                gridContainer.appendChild(gridItem);
            }
        }

        function rgbToHex(rgb) {
            const rgbArray = rgb.replace(/[^\d,]/g, '').split(',');
            const hex = rgbArray.map(x => {
                const hex = parseInt(x).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            }).join('');
            return `#${hex}`;
        }

        function updateColorInfo() {
            const colorInfo = document.getElementById('colorInfo');
            colorInfo.innerHTML = '';
            for (const [color, coordinates] of Object.entries(clickedBoxes)) {
                if (coordinates.length > 0) {
                    const option = document.createElement('option');
                    option.value = color;
                    option.textContent = color;
                    option.style.backgroundColor = color;
                    option.style.color = getContrastYIQ(color); // Ensure text is readable
                    colorInfo.appendChild(option);
                }
            }
        }

        function getContrastYIQ(hexcolor) {
            hexcolor = hexcolor.replace("#", "");
            const r = parseInt(hexcolor.substr(0, 2), 16);
            const g = parseInt(hexcolor.substr(2, 2), 16);
            const b = parseInt(hexcolor.substr(4, 2), 16);
            const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
            return (yiq >= 128) ? 'black' : 'white';
        }

        function selectSavedColor(select) {
            selectedColor = select.value;
            document.getElementById('colorPicker').value = selectedColor;
        }
    </script>
</body>
</html>
